CC        = @CC@
CXX       = @CXX@
DC        = @DC@
ESCRIPT   = @ESCRIPT@
EXECLINEB = @EXECLINEB@
GHC       = @GHC@
LSC       = @LSC@
LUA       = @LUA@
NEKOC     = @NEKOC@
NIM       = @NIM@
NODEJS    = @NODEJS@
OCAMLC    = @OCAMLC@
PERL5     = @PERL5@
PERL6     = @PERL6@
PHP       = @PHP@
PYTHON    = @PYTHON@
RACKET    = @RACKET@
RUBY      = @RUBY@
VALAC     = @VALAC@
ZSH       = @ZSH@

RST2HTML = @RST2HTML@
RST2HTMLFLAGS = @RST2HTMLFLAGS@

HAVE_BSD_STRING_H = @HAVE_BSD_STRING_H@

VPATH = @VPATH@

impls  =

ifdef CC
impls += c/piecemeal
impls += c/snprintf
impls += c/strlcat
impls += c/tblrot
impls += c/tblrot2
impls += c/ternaries
impls += c/trivial
endif

ifdef CXX
impls += cpp/fun
impls += cpp/irange
impls += cpp/trivial
impls += cpp/tts
endif

ifdef DC
impls += d/trivial
endif

ifdef NODEJS
impls += es6/trivial
impls += es6/match
impls += es6/fp
endif

ifdef ESCRIPT
impls += erlang/trivial
impls += erlang/guards
endif

ifdef EXECLINEB
impls += execline/trivial
endif

ifdef GHC
impls += haskell/trivial
impls += haskell/ops
endif

ifdef LSC
impls += livescript/trivial
impls += livescript/pipeline
endif

ifdef LUA
impls += lua/trivial
endif

ifdef NEKOC
impls += neko/trivial
endif

ifdef NIM
impls += nim/trivial
endif

ifdef OCAMLC
impls += ocaml/trivial
endif

ifdef PERL5
impls += perl5/trivial
endif

ifdef PERL6
impls += perl6/given
impls += perl6/trivial
endif

ifdef PHP
impls += php/trivial
endif

ifdef PYTHON
impls += python/trivial
endif

ifdef RACKET
impls += racket/trivial
endif

ifdef RUBY
impls += ruby/case
impls += ruby/monkey
impls += ruby/trivial
endif

ifdef VALAC
impls += genie/trivial
impls += vala/trivial
endif

ifdef ZSH
impls += zsh/patmat
impls += zsh/trivial
endif

crud   =
crud  += */*.o
crud  += haskell/*.hi

configured   =
configured  += GNUmakefile
configured  += Makefile
configured  += build-c
configured  += build-cpp
configured  += build-d
configured  += build-hs
configured  += build-ls
configured  += build-ml
configured  += build-nim
configured  += build-vala
configured  += mkexe

.PHONY: all
all: $(impls)

ifdef HAVE_BSD_STRING_H
c/strlcat: LDLIBS = -lbsd
endif

.EXPORT_ALL_VARIABLES:

% : %.sh

$(filter c/%,$(impls)): %: build-c %.c
	sh $^ $@

$(filter cpp/%,$(impls)): %: build-cpp %.cpp
	sh $^ $@

$(filter d/%,$(impls)): %: build-d %.d
	sh $^ $@

$(filter genie/%,$(impls)): %: build-vala %.gs
	sh $^ $@

$(filter haskell/%,$(impls)): %: build-hs %.hs
	sh $^ $@

$(filter nim/%,$(impls)): %: build-nim %.nim
	sh $^ $@

$(filter es6/%,$(impls)): %: mkexe %.js
	sh $^ $@ $(NODEJS)

$(filter erlang/%,$(impls)): %: mkexe %.erl
	sh $^ $@ $(ESCRIPT)

$(filter execline/%,$(impls)): %: mkexe %.xl
	sh $^ $@ $(EXECLINEB)

$(filter neko/%,$(impls)): %: build-neko %.neko
	sh $^ $@

$(filter ocaml/%,$(impls)): %: build-ml %.ml
	sh $^ $@

$(filter livescript/%,$(impls)): %: build-ls %.ls
	sh $^ $@

$(filter lua/%,$(impls)): %: mkexe %.lua
	sh $^ $@ $(LUA)

$(filter perl5/%,$(impls)): %: mkexe %.pl
	sh $^ $@ $(PERL5)

$(filter perl6/%,$(impls)): %: mkexe %.pl
	sh $^ $@ $(PERL6)

$(filter php/%,$(impls)): %: mkexe %.php
	sh $^ $@ $(PHP)

$(filter python/%,$(impls)): %: mkexe %.py
	sh $^ $@ $(PYTHON)

$(filter racket/%,$(impls)): %: mkexe %.rkt
	sh $^ $@ $(RACKET)

$(filter ruby/%,$(impls)): %: mkexe %.rb
	sh $^ $@ $(RUBY)

$(filter vala/%,$(impls)): %: build-vala %.vala
	sh $^ $@

$(filter zsh/%,$(impls)): %: mkexe %.zsh
	sh $^ $@ $(ZSH)


.PHONY: html
html: README.html

README.html: README.rst
	$(RST2HTML) $(RST2HTMLFLAGS) $< $@

.PHONY: clean
clean:
	$(RM) $(impls) $(crud) README.html
	$(RM) $(patsubst %,%.compiler,$(impls))
	$(RM) $(patsubst %,%.diff,$(impls))
	$(RM) $(patsubst %,%.output,$(impls))

.PHONY: realclean
realclean: clean
	$(RM) $(configured)

.PHONY: check
check: run-tests.sh expected-output $(impls)
	sh $^

RST2HTML = @RST2HTML@
RST2HTMLFLAGS = @RST2HTMLFLAGS@

HAVE_BSD_STRING_H = @HAVE_BSD_STRING_H@

VPATH = @VPATH@

impls  =

crud   =

configured   =
configured  += GNUmakefile
configured  += Makefile
configured  += mkexe

.PHONY: all
all: .all

ifdef HAVE_BSD_STRING_H
c/strlcat: LDLIBS = -lbsd
endif

.EXPORT_ALL_VARIABLES:

% : %.sh

# AOT-compiled things

CC = @CC@

ifdef CC
impls += c/piecemeal
impls += c/snprintf
impls += c/strlcat
impls += c/tblrot
impls += c/tblrot2
impls += c/ternaries
impls += c/trivial

configured += build-c

$(filter c/%,$(impls)): %: build-c %.c
	sh $^ $@
endif

CXX = @CXX@

ifdef CXX
impls += cpp/fun
impls += cpp/irange
impls += cpp/trivial
impls += cpp/tts

configured += build-cpp

$(filter cpp/%,$(impls)): %: build-cpp %.cpp
	sh $^ $@
endif

DC = @DC@

ifdef DC
impls += d/trivial
impls += d/algo

configured += build-d

$(filter d/%,$(impls)): %: build-d %.d
	sh $^ $@
endif

VALAC = @VALAC@

ifdef VALAC
impls += genie/trivial

configured += build-vala

$(filter genie/%,$(impls)): %: build-vala %.gs
	sh $^ $@
endif

GHC = @GHC@

ifdef GHC
impls += haskell/trivial
impls += haskell/ops

crud  += haskell/*.files/*

configured += build-hs

$(filter haskell/%,$(impls)): %: build-hs %.hs
	sh $^ $@
endif

IDRIS = @IDRIS@

ifdef IDRIS
impls += idris/trivial

crud  += idris/*.files/*

configured += build-idr

$(filter idris/%,$(impls)): %: build-idr %.idr
	sh $^ $@
endif

LSC = @LSC@

ifdef LSC
impls += livescript/trivial
impls += livescript/pipeline

configured += build-ls

$(filter livescript/%,$(impls)): %: build-ls %.ls
	sh $^ $@
endif

NEKOC = @NEKOC@

ifdef NEKOC
impls += neko/trivial

crud += neko/*.n

configured += build-neko

$(filter neko/%,$(impls)): %: build-neko %.neko
	sh $^ $@
endif

NIM = @NIM@

ifdef NIM
impls += nim/trivial

crud += nim/nimcache/*

configured += build-nim

$(filter nim/%,$(impls)): %: build-nim %.nim
	sh $^ $@
endif

OCAMLC = @OCAMLC@

ifdef OCAMLC
impls += ocaml/trivial

configured += build-ml

$(filter ocaml/%,$(impls)): %: build-ml %.ml
	sh $^ $@
endif

ifdef VALAC
impls += vala/trivial

configured += build-vala

$(filter vala/%,$(impls)): %: build-vala %.vala
	sh $^ $@
endif

# interpreted stuff

ESCRIPT = @ESCRIPT@

ifdef ESCRIPT
impls += erlang/trivial
impls += erlang/guards

$(filter erlang/%,$(impls)): %: mkexe %.erl
	sh $^ $@ $(ESCRIPT)
endif

NODEJS = @NODEJS@

ifdef NODEJS
impls += es6/trivial
impls += es6/match
impls += es6/fp

$(filter es6/%,$(impls)): %: mkexe %.js
	sh $^ $@ $(NODEJS)
endif

EXECLINEB = @EXECLINEB@

ifdef EXECLINEB
impls += execline/trivial

$(filter execline/%,$(impls)): %: mkexe %.xl
	sh $^ $@ $(EXECLINEB)
endif

GUILE = @GUILE@

ifdef GUILE
impls += guile/trivial

$(filter guile/%,$(impls)): %: mkexe %.scm
	sh $^ $@ $(GUILE)
endif

ICON = @ICON@

ifdef ICON
impls += icon/trivial
impls += icon/case

$(filter icon/%,$(impls)): %: mkexe %.icn
	sh $^ $@ $(ICON)
endif

LUA = @LUA@

ifdef LUA
impls += lua/trivial

$(filter lua/%,$(impls)): %: mkexe %.lua
	sh $^ $@ $(LUA)
endif

PERL5 = @PERL5@

ifdef PERL5
impls += perl5/trivial

$(filter perl5/%,$(impls)): %: mkexe %.pl
	sh $^ $@ $(PERL5)
endif

PERL6 = @PERL6@

ifdef PERL6
impls += perl6/given
impls += perl6/trivial

$(filter perl6/%,$(impls)): %: mkexe %.pl
	sh $^ $@ $(PERL6)
endif

PHP = @PHP@

ifdef PHP
impls += php/trivial

$(filter php/%,$(impls)): %: mkexe %.php
	sh $^ $@ $(PHP)
endif

PYTHON = @PYTHON@

ifdef PYTHON
impls += python/trivial

$(filter python/%,$(impls)): %: mkexe %.py
	sh $^ $@ $(PYTHON)
endif

RACKET = @RACKET@

ifdef RACKET
impls += racket/trivial

$(filter racket/%,$(impls)): %: mkexe %.rkt
	sh $^ $@ $(RACKET)
endif

RUBY = @RUBY@

ifdef RUBY
impls += ruby/case
impls += ruby/monkey
impls += ruby/trivial

$(filter ruby/%,$(impls)): %: mkexe %.rb
	sh $^ $@ $(RUBY)
endif

ZSH = @ZSH@

ifdef ZSH
impls += zsh/patmat
impls += zsh/trivial

$(filter zsh/%,$(impls)): %: mkexe %.zsh
	sh $^ $@ $(ZSH)
endif


.PHONY: .all
.all: $(sort $(impls))

.PHONY: html
html: README.html

README.html: README.rst
	$(RST2HTML) $(RST2HTMLFLAGS) $< $@

.PHONY: clean
clean:
	$(RM) $(impls) $(crud) README.html
	$(RM) $(patsubst %,%.compiler,$(impls))
	$(RM) $(patsubst %,%.diff,$(impls))
	$(RM) $(patsubst %,%.output,$(impls))

.PHONY: realclean
realclean: clean
	$(RM) $(configured)

.PHONY: check
check: run-tests.sh expected-output $(sort $(impls))
	@sh $^

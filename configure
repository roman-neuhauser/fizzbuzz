#!/bin/sh
# vim: et sts=2 sw=2 ts=8 fdm=marker cms=\ #\ %s

set -o errexit
set -o nounset

rootdir=$(dirname $(realpath $0))

populate() # {{{
{
  sed \
    -e "s@GMAKE@$GMAKEg" \
    -e "s@MAKE@$MAKEg" \
    -e "s@VPATH@$VPATHg" \
    \
    -e "s@RST2HTML@$RST2HTMLg" \
    -e "s@RST2HTMLFLAGS@$RST2HTMLFLAGSg" \
    \
    -e "s@CC@$CCg" \
    -e "s@CFLAGS@$CFLAGSg" \
    -e "s@CPPFLAGS@$CPPFLAGSg" \
    -e "s@CXX@$CXXg" \
    -e "s@CXXFLAGS@$CXXFLAGSg" \
    \
    -e "s@HAVE_BSD_STRING_H@$HAVE_BSD_STRING_Hg" \
    \
    -e "s@LDFLAGS@$LDFLAGSg" \
    -e "s@LDLIBS@$LDLIBSg" \
    \
    -e "s@ESCRIPT@$ESCRIPTg" \
    \
    -e "s@EXECLINEB@$EXECLINEBg" \
    \
    -e "s@GHC@$GHCg" \
    -e "s@GHCFLAGS@$GHCFLAGSg" \
    \
    -e "s@NEKOC@$NEKOCg" \
    -e "s@NEKOCFLAGS@$NEKOCFLAGSg" \
    -e "s@NEKOTOOLS@$NEKOTOOLSg" \
    \
    -e "s@NIM@$NIMg" \
    -e "s@NIMFLAGS@$NIMFLAGSg" \
    \
    -e "s@LSC@$LSCg" \
    -e "s@LSCFLAGS@$LSCFLAGSg" \
    \
    -e "s@LUA@$LUAg" \
    -e "s@LUAFLAGS@$LUAFLAGSg" \
    \
    -e "s@NODEJS@$NODEJSg" \
    -e "s@NODEJSFLAGS@$NODEJSFLAGSg" \
    \
    -e "s@OCAMLC@$OCAMLCg" \
    -e "s@OCAMLCFLAGS@$OCAMLCFLAGSg" \
    \
    -e "s@PERL5@$PERL5g" \
    -e "s@PERL6@$PERL6g" \
    -e "s@PHP@$PHPg" \
    -e "s@PYTHON@$PYTHONg" \
    -e "s@RUBY@$RUBYg" \
    -e "s@ZSH@$ZSHg" \
    \
    -e "s@VALAC@$VALACg" \
    -e "s@VALACFLAGS@$VALACFLAGSg" \
    \
    $1 \
  > $2
  report "created file" $2
} # }}}

testfor() # {{{
{
  local mode=$1; shift
  local lang="$1"
  local var="$2"
  local cmd="$3"
  if test $help_requested -ne 0; then
    printf "$lang:\n"
    if test "$mode" = lang; then
      local lc=$(echo "$lang" | tr '[A-Z]' '[a-z]')
      printf "  use --disable-%s to avoid the %s implementation(s)\n" \
        "$lc" "$lang"
    fi
    printf "  use %s=<executable> to override the default (%s)\n\n" \
      "$var" "$cmd"
    return
  fi

  local what=$(echo "$lang" | tr +. x_ | tr '[A-Z]' '[a-z]')
  eval "local avoid=\${avoid_$what-}"

  if test 0 -ne "${avoid:-0}"; then
    eval "$var="
    report $lang excluded by request
    return
  fi

  local val=
  eval "val=\${$var-}"
  local curval="${val:-$cmd}"
  if test -z "$val"; then
    val="$cmd"
  fi
  if test "${val#/}" = "$val"; then
    val=$(which $val 2>/dev/null || :)
    eval "$var="'"$val"'
  fi
  if test -z "$val"; then
    report $lang not found: ${curval:-$cmd}
    return
  elif ! test -x "$val"; then
    report $lang not executable: $val
    return
  fi
  report $lang $val
} # }}}

report() # {{{
{
  printf "%-13s:" "$1"
  shift
  printf " %s" "$@"
  printf "\n"
} # }}}

VPATH="$rootdir"

RST2HTMLFLAGS="--strict"

CFLAGS="-Wall -Wextra"
CXXFLAGS="-Wall -Wextra -std=c++14"
CPPFLAGS="-D_ISOC99_SOURCE"
NIMFLAGS="--warnings:on"
GHCFLAGS=-Wall
LSCFLAGS=
LUAFLAGS=
NEKOCFLAGS=
NODEJSFLAGS=
OCAMLCFLAGS=
LDFLAGS=
LDLIBS=
VALACFLAGS=

HAVE_BSD_STRING_H=

for d in /usr/local/include /usr/include; do
  if test -e $d/bsd/string.h; then
    HAVE_BSD_STRING_H=1
    CPPFLAGS="$CPPFLAGS -I$d -DHAVE_BSD_STRING_H"
  fi
done

for d in /usr/local/include /usr/include; do
  if test -e $d/boost/range/irange.hpp; then
    CPPFLAGS="$CPPFLAGS -I$d"
  fi
done

case "$(uname -s)" in
Linux)
  MAKE=make
  GMAKE=$MAKE
;;
DragonFly|*BSD)
  MAKE=make
  GMAKE=gmake
;;
*)
  MAKE=gmake
  GMAKE=$MAKE
;;
esac

help_requested=0

for a in "$@"; do # {{{
  case $a in
  -h|--help)
    help_requested=1
    break
  ;;
  --disable-*)
    what=${a#--disable-}
    what=$(echo "$what" | tr +. x_)
    eval avoid_$what=1
  ;;
  -*)
    echo >&2 "error: unknown option '$a'"
    exit 1
  ;;
  ?*=*)
    var="${a%%=*}"
    val="${a#*=}"
    eval "$var="'"$val"'
  ;;
  esac
done # }}}

testfor tool rst2html RST2HTML  rst2html5

testfor lang C        CC        cc
testfor lang C++      CXX       c++
testfor lang Erlang   ESCRIPT   escript
testfor lang Execline EXECLINEB execlineb
testfor lang Haskell  GHC       ghc
testfor lang LiveScript LSC     lsc
testfor lang Lua      LUA       lua
testfor lang Neko     NEKOC     nekoc
testfor lang Neko     NEKOTOOLS nekotools
testfor lang Nim      NIM       nim
testfor lang Node.js  NODEJS    node
testfor lang OCaml    OCAMLC    ocamlopt
testfor lang Perl5    PERL5     perl
testfor lang Perl6    PERL6     perl6
testfor lang PHP      PHP       php
testfor lang Python   PYTHON    python
testfor lang Ruby     RUBY      ruby
testfor lang Vala     VALAC     valac
testfor lang Zsh      ZSH       zsh

test $help_requested -eq 0 || exit

echo

populate $rootdir/build-c.sh build-c
populate $rootdir/build-cpp.sh build-cpp
populate $rootdir/build-hs.sh build-hs
populate $rootdir/build-ls.sh build-ls
populate $rootdir/build-ml.sh build-ml
populate $rootdir/build-neko.sh build-neko
populate $rootdir/build-nim.sh build-nim
populate $rootdir/build-vala.sh build-vala
populate $rootdir/mkexe.sh mkexe
populate $rootdir/GNUmakefile.in GNUmakefile

if test "$MAKE" != "$GMAKE"; then
  case "$(uname -s)" in
  DragonFly|*BSD)
    populate $rootdir/Makefile.in Makefile
  ;;
  esac
fi

cat <<EOF

to build the programs from their sources:

  $MAKE

to test their correctness:

  $MAKE check

EOF
